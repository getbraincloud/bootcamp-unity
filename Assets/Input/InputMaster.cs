//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Ship"",
            ""id"": ""2cf8e903-e21f-483f-bd15-6ab0d6eaf2fe"",
            ""actions"": [
                {
                    ""name"": ""MovementUp"",
                    ""type"": ""Value"",
                    ""id"": ""e814d7d4-4fe8-4f39-ab88-c33f83aa033e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementDown"",
                    ""type"": ""Value"",
                    ""id"": ""d703e72e-0232-4265-8712-e91d3bb20e79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementLeft"",
                    ""type"": ""Button"",
                    ""id"": ""3c2463ac-c8aa-45a3-a492-42a560bc802c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementRight"",
                    ""type"": ""Button"",
                    ""id"": ""f64256d5-98ec-4fa0-bdb8-51d95920f8ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""d215e9cd-c0e2-44e8-90d7-40392afe7217"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""d8f58ad3-3c63-408e-89b4-9ff82e58e87b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c2f77df0-8489-4bec-91be-75d58c005171"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8aceae2-2892-4cd1-8e33-b43952791173"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a47139b-3014-476c-9ca2-a2048b940c3f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""067d5834-682e-4d2e-8b93-ead9ea6284d7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ca46ed8-3e7e-4166-9cfe-1a0bf327b5e8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ac3bb7d-eda8-4512-b5fc-19f1eb73d371"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a05e88e7-88f3-4ac6-932c-d331e2e76a8c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4f988cb-7a41-414d-bf9c-ccce96a7962a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4837d98b-56af-4f67-be42-6968414342c1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74daf7f2-af08-4f58-968c-5fe86d76a16a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogs"",
            ""id"": ""5cd13394-2a35-49d9-985d-d9edf0cca180"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""a0eb482f-af01-4b10-832d-926d90b4a035"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2e91c53-afc9-4365-b34e-b709b8c5f17d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CheatCodes"",
            ""id"": ""8beaac25-4f18-491f-bbb2-f45c045fd425"",
            ""actions"": [
                {
                    ""name"": ""AddTime"",
                    ""type"": ""Button"",
                    ""id"": ""df2aa06a-f908-425b-a136-5658dd71249d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""dfab5d39-b825-415b-b7e4-4a4bc08806fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextLevel"",
                    ""type"": ""Button"",
                    ""id"": ""ed97b688-9e1f-4c88-a2cb-f220f95bce61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HealUp"",
                    ""type"": ""Button"",
                    ""id"": ""b8e0cb4d-c77c-4d62-9376-17e79c2ed582"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""190d3fe7-5331-46e7-afa8-6fe35b27852f"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72e38fe2-75c2-46ed-a7cc-e4148adff3fd"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d01f08f-f284-4ad8-95f4-13ed83e01754"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8cfc906-639c-4a2c-89f3-a440bebb30de"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HealUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ship
        m_Ship = asset.FindActionMap("Ship", throwIfNotFound: true);
        m_Ship_MovementUp = m_Ship.FindAction("MovementUp", throwIfNotFound: true);
        m_Ship_MovementDown = m_Ship.FindAction("MovementDown", throwIfNotFound: true);
        m_Ship_MovementLeft = m_Ship.FindAction("MovementLeft", throwIfNotFound: true);
        m_Ship_MovementRight = m_Ship.FindAction("MovementRight", throwIfNotFound: true);
        m_Ship_Fire = m_Ship.FindAction("Fire", throwIfNotFound: true);
        m_Ship_Hold = m_Ship.FindAction("Hold", throwIfNotFound: true);
        // Dialogs
        m_Dialogs = asset.FindActionMap("Dialogs", throwIfNotFound: true);
        m_Dialogs_Escape = m_Dialogs.FindAction("Escape", throwIfNotFound: true);
        // CheatCodes
        m_CheatCodes = asset.FindActionMap("CheatCodes", throwIfNotFound: true);
        m_CheatCodes_AddTime = m_CheatCodes.FindAction("AddTime", throwIfNotFound: true);
        m_CheatCodes_Reset = m_CheatCodes.FindAction("Reset", throwIfNotFound: true);
        m_CheatCodes_NextLevel = m_CheatCodes.FindAction("NextLevel", throwIfNotFound: true);
        m_CheatCodes_HealUp = m_CheatCodes.FindAction("HealUp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ship
    private readonly InputActionMap m_Ship;
    private IShipActions m_ShipActionsCallbackInterface;
    private readonly InputAction m_Ship_MovementUp;
    private readonly InputAction m_Ship_MovementDown;
    private readonly InputAction m_Ship_MovementLeft;
    private readonly InputAction m_Ship_MovementRight;
    private readonly InputAction m_Ship_Fire;
    private readonly InputAction m_Ship_Hold;
    public struct ShipActions
    {
        private @InputMaster m_Wrapper;
        public ShipActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementUp => m_Wrapper.m_Ship_MovementUp;
        public InputAction @MovementDown => m_Wrapper.m_Ship_MovementDown;
        public InputAction @MovementLeft => m_Wrapper.m_Ship_MovementLeft;
        public InputAction @MovementRight => m_Wrapper.m_Ship_MovementRight;
        public InputAction @Fire => m_Wrapper.m_Ship_Fire;
        public InputAction @Hold => m_Wrapper.m_Ship_Hold;
        public InputActionMap Get() { return m_Wrapper.m_Ship; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipActions set) { return set.Get(); }
        public void SetCallbacks(IShipActions instance)
        {
            if (m_Wrapper.m_ShipActionsCallbackInterface != null)
            {
                @MovementUp.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnMovementUp;
                @MovementUp.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnMovementUp;
                @MovementUp.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnMovementUp;
                @MovementDown.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnMovementDown;
                @MovementDown.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnMovementDown;
                @MovementDown.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnMovementDown;
                @MovementLeft.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnMovementLeft;
                @MovementLeft.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnMovementLeft;
                @MovementLeft.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnMovementLeft;
                @MovementRight.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnMovementRight;
                @MovementRight.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnMovementRight;
                @MovementRight.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnMovementRight;
                @Fire.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnFire;
                @Hold.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnHold;
                @Hold.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnHold;
                @Hold.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnHold;
            }
            m_Wrapper.m_ShipActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovementUp.started += instance.OnMovementUp;
                @MovementUp.performed += instance.OnMovementUp;
                @MovementUp.canceled += instance.OnMovementUp;
                @MovementDown.started += instance.OnMovementDown;
                @MovementDown.performed += instance.OnMovementDown;
                @MovementDown.canceled += instance.OnMovementDown;
                @MovementLeft.started += instance.OnMovementLeft;
                @MovementLeft.performed += instance.OnMovementLeft;
                @MovementLeft.canceled += instance.OnMovementLeft;
                @MovementRight.started += instance.OnMovementRight;
                @MovementRight.performed += instance.OnMovementRight;
                @MovementRight.canceled += instance.OnMovementRight;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Hold.started += instance.OnHold;
                @Hold.performed += instance.OnHold;
                @Hold.canceled += instance.OnHold;
            }
        }
    }
    public ShipActions @Ship => new ShipActions(this);

    // Dialogs
    private readonly InputActionMap m_Dialogs;
    private IDialogsActions m_DialogsActionsCallbackInterface;
    private readonly InputAction m_Dialogs_Escape;
    public struct DialogsActions
    {
        private @InputMaster m_Wrapper;
        public DialogsActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_Dialogs_Escape;
        public InputActionMap Get() { return m_Wrapper.m_Dialogs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogsActions set) { return set.Get(); }
        public void SetCallbacks(IDialogsActions instance)
        {
            if (m_Wrapper.m_DialogsActionsCallbackInterface != null)
            {
                @Escape.started -= m_Wrapper.m_DialogsActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_DialogsActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_DialogsActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_DialogsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public DialogsActions @Dialogs => new DialogsActions(this);

    // CheatCodes
    private readonly InputActionMap m_CheatCodes;
    private ICheatCodesActions m_CheatCodesActionsCallbackInterface;
    private readonly InputAction m_CheatCodes_AddTime;
    private readonly InputAction m_CheatCodes_Reset;
    private readonly InputAction m_CheatCodes_NextLevel;
    private readonly InputAction m_CheatCodes_HealUp;
    public struct CheatCodesActions
    {
        private @InputMaster m_Wrapper;
        public CheatCodesActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddTime => m_Wrapper.m_CheatCodes_AddTime;
        public InputAction @Reset => m_Wrapper.m_CheatCodes_Reset;
        public InputAction @NextLevel => m_Wrapper.m_CheatCodes_NextLevel;
        public InputAction @HealUp => m_Wrapper.m_CheatCodes_HealUp;
        public InputActionMap Get() { return m_Wrapper.m_CheatCodes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheatCodesActions set) { return set.Get(); }
        public void SetCallbacks(ICheatCodesActions instance)
        {
            if (m_Wrapper.m_CheatCodesActionsCallbackInterface != null)
            {
                @AddTime.started -= m_Wrapper.m_CheatCodesActionsCallbackInterface.OnAddTime;
                @AddTime.performed -= m_Wrapper.m_CheatCodesActionsCallbackInterface.OnAddTime;
                @AddTime.canceled -= m_Wrapper.m_CheatCodesActionsCallbackInterface.OnAddTime;
                @Reset.started -= m_Wrapper.m_CheatCodesActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_CheatCodesActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_CheatCodesActionsCallbackInterface.OnReset;
                @NextLevel.started -= m_Wrapper.m_CheatCodesActionsCallbackInterface.OnNextLevel;
                @NextLevel.performed -= m_Wrapper.m_CheatCodesActionsCallbackInterface.OnNextLevel;
                @NextLevel.canceled -= m_Wrapper.m_CheatCodesActionsCallbackInterface.OnNextLevel;
                @HealUp.started -= m_Wrapper.m_CheatCodesActionsCallbackInterface.OnHealUp;
                @HealUp.performed -= m_Wrapper.m_CheatCodesActionsCallbackInterface.OnHealUp;
                @HealUp.canceled -= m_Wrapper.m_CheatCodesActionsCallbackInterface.OnHealUp;
            }
            m_Wrapper.m_CheatCodesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AddTime.started += instance.OnAddTime;
                @AddTime.performed += instance.OnAddTime;
                @AddTime.canceled += instance.OnAddTime;
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
                @NextLevel.started += instance.OnNextLevel;
                @NextLevel.performed += instance.OnNextLevel;
                @NextLevel.canceled += instance.OnNextLevel;
                @HealUp.started += instance.OnHealUp;
                @HealUp.performed += instance.OnHealUp;
                @HealUp.canceled += instance.OnHealUp;
            }
        }
    }
    public CheatCodesActions @CheatCodes => new CheatCodesActions(this);
    public interface IShipActions
    {
        void OnMovementUp(InputAction.CallbackContext context);
        void OnMovementDown(InputAction.CallbackContext context);
        void OnMovementLeft(InputAction.CallbackContext context);
        void OnMovementRight(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnHold(InputAction.CallbackContext context);
    }
    public interface IDialogsActions
    {
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface ICheatCodesActions
    {
        void OnAddTime(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnNextLevel(InputAction.CallbackContext context);
        void OnHealUp(InputAction.CallbackContext context);
    }
}
